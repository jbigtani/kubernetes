Storing and Accessing Sensitive Information Using Kubernetes Secrets

Introduction
Kubernetes provides Secrets as a way of storing sensitive data, such as passwords or API keys. Secrets reduce the risk of accidental exposure compared to if they were stored in an image or put in a Pod specification. Kubernetes supports storing Secrets as generic key-value pairs, and also provides specialized support for TLS certificate secrets and Docker registry secrets used for pulling images from registries that require authentication. This Lab Step focuses on the generic variety of Secrets.

Secrets are very similar to ConfigMaps with the main difference being their intent, i.e. Secrets store sensitive information and ConfigMaps should store configuraiton data. Secrets are not encrypted at rest by default and are instead only base-64 encoded. However, Kubernetes can separately control access to ConfigMaps and Secrets. So by following the pattern of storing sensitive data in Secrets, users of the cluster can be denied access to Secrets but granted access to ConfigMaps using Kubernetes access control mechanisms.

In this Lab Step, you will create a new secret and use it in a Pod through environment variables.

 

Instructions
1. Create a Namespace for the resources you'll create in this Lab Step and change your default kubectl context to use the Namespace:

# Create namespace
kubectl create namespace secrets
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=secrets
 

2. Use kubectl to create a Secret named app-secret:

kubectl create secret generic app-secret --from-literal=password=123457
The generic key-value pair Secret is assigned using the --from-literal option with an equal sign separating the key (our-secret) from the value (almost finished). You can see kubectl create secret generic --help for other methods and examples for creating generic secrets.

Examples:
  # Create a new secret named my-secret with keys for each file in folder bar
  kubectl create secret generic my-secret --from-file=path/to/bar

  # Create a new secret named my-secret with specified keys instead of names on disk
  kubectl create secret generic my-secret --from-file=ssh-privatekey=~/.ssh/id_rsa
--from-file=ssh-publickey=~/.ssh/id_rsa.pub

  # Create a new secret named my-secret with key1=supersecret and key2=topsecret
  kubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret

  # Create a new secret named my-secret using a combination of a file and a literal
  kubectl create secret generic my-secret --from-file=ssh-privatekey=~/.ssh/id_rsa --from-literal=passphrase=topsecret

  # Create a new secret named my-secret from an env file
  kubectl create secret generic my-secret --from-env-file=path/to/bar.env
 

3. Get the YAML output for the Secret you created:

kubectl get secret app-secret -o yaml

ubuntu@ip-10-0-128-5:~$ kubectl get secret app-secret -o yaml
apiVersion: v1
data:
  password: MTIzNDU3
kind: Secret
metadata:
  creationTimestamp: "2019-06-26T10:19:21Z"
  name: app-secret
  namespace: secrets
  resourceVersion: "8118"
  selfLink: /api/v1/namespaces/secrets/secrets/app-secret
  uid: dd5d778a-97fb-11e9-829a-06d8e9a9bce4
type: Opaque


The data field holds all of the key-value pairs. In this case, there is only one. The key password appears as expected, but the value (MTIzNDU3) is far from "123457". That is because secret values are base-64 encoded. 

Note: When you use kubectl create secret, the value is automatically encoded. If you use kubectl create -f, and specify a resource file, you need to encode the value yourself. See the next instruction for how to achieve this.

 

4. Confirm the secret value is base-64 encoded by decoding it:

kubectl get secret app-secret -o jsonpath="{.data.password}" \
  | base64 --decode \
  && echo
alt

The base64 command can encode/decode strings. The --decode option must be specified to decode while the behavior with no options is to encode. The final echo is used to add a new line to the output so the shell prompt is on its own line.

 

5. Create a Pod that uses the Secret through an environment variable:

cat << EOF > pod-secret.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: pod-secret
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    env:
    - name: PASSWORD      # Name of environment variable
      valueFrom:
        secretKeyRef:
          name: app-secret  # Name of secret
          key: password     # Name of secret key
EOF

kubectl create -f pod-secret.yaml
When using a secret through an environment variable, you must include valueFrom.secretKeyRef to specify the source of the environment variable.

 

6. Print the value of the environment variable in the Pod's container:

kubectl exec pod-secret -- /bin/sh -c 'echo $PASSWORD'
alt

Notice that the value is base-64 decoded automatically, so there is no need to use base64 --decode inside the container.

 