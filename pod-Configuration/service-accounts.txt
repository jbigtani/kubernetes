Using Kubernetes ServiceAccounts

Introduction
Kubernetes uses ServiceAccounts as a mechanism for providing Pods with an identity in the cluster. Pod's can authenticate using ServiceAccounts and gain access to APIs that the ServiceAccount has been granted. Your cluster administrator can create specific roles that grant access to APIs and bind the roles to ServiceAccounts. This is referred to as role-based access control (RBAC). Pods can then declare a ServiceAccount in their specification to gain the access associated with the ServiceAccount's role. As an example, you could use a ServiceAccount to grant a Pod access to the GET Pod API to allow the Pod to get the details of other Pods. This Lab Step focuses on ServiceAccounts and not the roles that are used to grant access to Kubernetes APIs that would be configured by a Kubernetes administrator.

 

Instructions
1. Create a Namespace for the resources you'll create in this Lab Step and change your default kubectl context to use the Namespace:

# Create namespace
kubectl create namespace serviceaccounts
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=serviceaccounts
 

2. Get the ServiceAccounts in the Namespace:

ubuntu@ip-10-0-128-5:~$ kubectl get serviceaccounts
NAME      SECRETS   AGE
default   1         72s


Each Namespace has a default ServiceAccount. The default ServiceAccount grants minimal access to APIs and cannot be used to get any cluster state information. Therefore, you should use custom ServiceAccounts when your application requires access to cluster state.

 

3. Create a Pod and get its YAML manifest:

kubectl run default-pod --generator=run-pod/v1 --image=mongo:4.0.6 
kubectl get pod default-pod -o yaml | more
 

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2019-06-26T10:34:24Z"
  labels:
    run: default-pod
  name: default-pod
  namespace: serviceaccounts
  resourceVersion: "9404"
  selfLink: /api/v1/namespaces/serviceaccounts/pods/default-pod
  uid: f75b7ef9-97fd-11e9-829a-06d8e9a9bce4
spec:
  containers:
  - image: mongo:4.0.6
    imagePullPolicy: IfNotPresent
    name: default-pod
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-ggpdn
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: ip-10-0-1-213.us-west-2.compute.internal
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
   tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-ggpdn
    secret:
      defaultMode: 420
      secretName: default-token-ggpdn
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:34:24Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:34:26Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:34:26Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:34:24Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
   - containerID: docker://37e23645b2d1257d4012e439eceb141fa23177a08f7ae9081ee7945a56
ab99c0
    image: mongo:4.0.6
    imageID: docker-pullable://mongo@sha256:720cbcd65b0212f312f50cb006ab9058af20962f
1de7214158ac74343a891c8a
    lastState: {}
    name: default-pod
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "2019-06-26T10:34:26Z"
  hostIP: 10.0.1.213
  phase: Running
  podIP: 192.168.10.136
  qosClass: BestEffort
  startTime: "2019-06-26T10:34:24Z"


Observe the spec.serviceAccount is automatically set to the default ServiceAccount. To configure a Pod's ServiceAccount you can set the spec.serviceAccount when a Pod is created.

 

4. Create a new ServiceAccount:

kubectl create serviceaccount app-sa
It is a best practice to create a ServiceAccount for each of your applications to use the least amount of access necessary (principle of least privilege) to improve security. The created ServiceAccount will not have any specific role bound to it so there are no additional permissions associated with it. In practice your Kubernetes administrator would create a role and bind it to the ServiceAccount. 

ubuntu@ip-10-0-128-5:~$ kubectl get serviceaccounts app-sa -o yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "2019-06-26T10:36:20Z"
  name: app-sa
  namespace: serviceaccounts
  resourceVersion: "9567"
  selfLink: /api/v1/namespaces/serviceaccounts/serviceaccounts/app-sa
  uid: 3ccd0547-97fe-11e9-829a-06d8e9a9bce4
secrets:
- name: app-sa-token-l89qf

 

5. Create a new Pod that uses the custom ServiceAccount:

cat << 'EOF' > pod-custom-sa.yaml
apiVersion: v1
kind: Pod
metadata:
  name: custom-sa-pod 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
  serviceAccount: app-sa
EOF
kubectl create -f pod-custom-sa.yaml
You could also quickly generate a similar manifest file by using the following command which uses --dry-run -o yaml and then customizing it to your needs: kubectl run default-pod --generator=run-pod/v1 --image=mongo:4.0.6 --serviceaccount=app-sa --dry-run -o yaml

ubuntu@ip-10-0-128-5:~$ kubectl run default-pod --generator=run-pod/v1 --image=mongo:4.0.6 --serviceaccount=app-sa --dry-run -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: default-pod
  name: default-pod
spec:
  containers:
  - image: mongo:4.0.6
    name: default-pod
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  serviceAccountName: app-sa
status: {}
 

6. Get the Pod's YAML manifest:

kubectl get pod custom-sa-pod -o yaml | more

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2019-06-26T10:38:01Z"
  name: custom-sa-pod
  namespace: serviceaccounts
  resourceVersion: "9720"
  selfLink: /api/v1/namespaces/serviceaccounts/pods/custom-sa-pod
  uid: 78b2b561-97fe-11e9-829a-06d8e9a9bce4
spec:
  containers:
  - image: mongo:4.0.6
    imagePullPolicy: IfNotPresent
    name: mongodb
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: app-sa-token-l89qf
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: ip-10-0-1-213.us-west-2.compute.internal
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: app-sa
  serviceAccountName: app-sa
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: app-sa-token-l89qf
    secret:
      defaultMode: 420
      secretName: app-sa-token-l89qf
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:38:01Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:38:04Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:38:04Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2019-06-26T10:38:01Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://d37dfb61c5bf14180502225321942e3d05a8d1501e595fe4d895115c7c167f8d
    image: mongo:4.0.6
    imageID: docker-pullable://mongo@sha256:720cbcd65b0212f312f50cb006ab9058af20962f1de7214158ac74343a891c8a
    lastState: {}
    name: mongodb
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "2019-06-26T10:38:03Z"
  hostIP: 10.0.1.213
  phase: Running
  podIP: 192.168.10.137
  qosClass: BestEffort
  startTime: "2019-06-26T10:38:01Z"



The output confirms the app-sa ServiceAccount is being used. Every ServiceAccount has a corresponding token secret (see them with kubectl get secrets) that can be used to authenticate requests from inside the container. The ServiceAccount's token secret is automatically mounted as a volume. That is what you see in the volumeMounts configuration.

 

Summary
In this Lab Step, you learned about Kubernetes ServiceAccounts which are used to give Pod's an identity in the cluster. ServiceAccounts can have custom roles bound to them allowing Pods access to Kubernetes APIs thereby granting Pods access to cluster state information.